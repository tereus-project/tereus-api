// Code generated by entc, DO NOT EDIT.

package submission

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/tereus-project/tereus-api/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// SourceLanguage applies equality check predicate on the "source_language" field. It's identical to SourceLanguageEQ.
func SourceLanguage(v string) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSourceLanguage), v))
	})
}

// TargetLanguage applies equality check predicate on the "target_language" field. It's identical to TargetLanguageEQ.
func TargetLanguage(v string) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTargetLanguage), v))
	})
}

// IsInline applies equality check predicate on the "is_inline" field. It's identical to IsInlineEQ.
func IsInline(v bool) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsInline), v))
	})
}

// IsPublic applies equality check predicate on the "is_public" field. It's identical to IsPublicEQ.
func IsPublic(v bool) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsPublic), v))
	})
}

// Reason applies equality check predicate on the "reason" field. It's identical to ReasonEQ.
func Reason(v string) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReason), v))
	})
}

// GitRepo applies equality check predicate on the "git_repo" field. It's identical to GitRepoEQ.
func GitRepo(v string) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGitRepo), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// ShareID applies equality check predicate on the "share_id" field. It's identical to ShareIDEQ.
func ShareID(v string) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShareID), v))
	})
}

// SubmissionSourceSizeBytes applies equality check predicate on the "submission_source_size_bytes" field. It's identical to SubmissionSourceSizeBytesEQ.
func SubmissionSourceSizeBytes(v int) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSubmissionSourceSizeBytes), v))
	})
}

// SubmissionTargetSizeBytes applies equality check predicate on the "submission_target_size_bytes" field. It's identical to SubmissionTargetSizeBytesEQ.
func SubmissionTargetSizeBytes(v int) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSubmissionTargetSizeBytes), v))
	})
}

// SourceLanguageEQ applies the EQ predicate on the "source_language" field.
func SourceLanguageEQ(v string) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSourceLanguage), v))
	})
}

// SourceLanguageNEQ applies the NEQ predicate on the "source_language" field.
func SourceLanguageNEQ(v string) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSourceLanguage), v))
	})
}

// SourceLanguageIn applies the In predicate on the "source_language" field.
func SourceLanguageIn(vs ...string) predicate.Submission {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Submission(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSourceLanguage), v...))
	})
}

// SourceLanguageNotIn applies the NotIn predicate on the "source_language" field.
func SourceLanguageNotIn(vs ...string) predicate.Submission {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Submission(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSourceLanguage), v...))
	})
}

// SourceLanguageGT applies the GT predicate on the "source_language" field.
func SourceLanguageGT(v string) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSourceLanguage), v))
	})
}

// SourceLanguageGTE applies the GTE predicate on the "source_language" field.
func SourceLanguageGTE(v string) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSourceLanguage), v))
	})
}

// SourceLanguageLT applies the LT predicate on the "source_language" field.
func SourceLanguageLT(v string) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSourceLanguage), v))
	})
}

// SourceLanguageLTE applies the LTE predicate on the "source_language" field.
func SourceLanguageLTE(v string) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSourceLanguage), v))
	})
}

// SourceLanguageContains applies the Contains predicate on the "source_language" field.
func SourceLanguageContains(v string) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSourceLanguage), v))
	})
}

// SourceLanguageHasPrefix applies the HasPrefix predicate on the "source_language" field.
func SourceLanguageHasPrefix(v string) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSourceLanguage), v))
	})
}

// SourceLanguageHasSuffix applies the HasSuffix predicate on the "source_language" field.
func SourceLanguageHasSuffix(v string) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSourceLanguage), v))
	})
}

// SourceLanguageEqualFold applies the EqualFold predicate on the "source_language" field.
func SourceLanguageEqualFold(v string) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSourceLanguage), v))
	})
}

// SourceLanguageContainsFold applies the ContainsFold predicate on the "source_language" field.
func SourceLanguageContainsFold(v string) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSourceLanguage), v))
	})
}

// TargetLanguageEQ applies the EQ predicate on the "target_language" field.
func TargetLanguageEQ(v string) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTargetLanguage), v))
	})
}

// TargetLanguageNEQ applies the NEQ predicate on the "target_language" field.
func TargetLanguageNEQ(v string) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTargetLanguage), v))
	})
}

// TargetLanguageIn applies the In predicate on the "target_language" field.
func TargetLanguageIn(vs ...string) predicate.Submission {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Submission(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTargetLanguage), v...))
	})
}

// TargetLanguageNotIn applies the NotIn predicate on the "target_language" field.
func TargetLanguageNotIn(vs ...string) predicate.Submission {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Submission(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTargetLanguage), v...))
	})
}

// TargetLanguageGT applies the GT predicate on the "target_language" field.
func TargetLanguageGT(v string) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTargetLanguage), v))
	})
}

// TargetLanguageGTE applies the GTE predicate on the "target_language" field.
func TargetLanguageGTE(v string) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTargetLanguage), v))
	})
}

// TargetLanguageLT applies the LT predicate on the "target_language" field.
func TargetLanguageLT(v string) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTargetLanguage), v))
	})
}

// TargetLanguageLTE applies the LTE predicate on the "target_language" field.
func TargetLanguageLTE(v string) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTargetLanguage), v))
	})
}

// TargetLanguageContains applies the Contains predicate on the "target_language" field.
func TargetLanguageContains(v string) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTargetLanguage), v))
	})
}

// TargetLanguageHasPrefix applies the HasPrefix predicate on the "target_language" field.
func TargetLanguageHasPrefix(v string) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTargetLanguage), v))
	})
}

// TargetLanguageHasSuffix applies the HasSuffix predicate on the "target_language" field.
func TargetLanguageHasSuffix(v string) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTargetLanguage), v))
	})
}

// TargetLanguageEqualFold applies the EqualFold predicate on the "target_language" field.
func TargetLanguageEqualFold(v string) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTargetLanguage), v))
	})
}

// TargetLanguageContainsFold applies the ContainsFold predicate on the "target_language" field.
func TargetLanguageContainsFold(v string) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTargetLanguage), v))
	})
}

// IsInlineEQ applies the EQ predicate on the "is_inline" field.
func IsInlineEQ(v bool) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsInline), v))
	})
}

// IsInlineNEQ applies the NEQ predicate on the "is_inline" field.
func IsInlineNEQ(v bool) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsInline), v))
	})
}

// IsPublicEQ applies the EQ predicate on the "is_public" field.
func IsPublicEQ(v bool) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsPublic), v))
	})
}

// IsPublicNEQ applies the NEQ predicate on the "is_public" field.
func IsPublicNEQ(v bool) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsPublic), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Submission {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Submission(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Submission {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Submission(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// ReasonEQ applies the EQ predicate on the "reason" field.
func ReasonEQ(v string) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReason), v))
	})
}

// ReasonNEQ applies the NEQ predicate on the "reason" field.
func ReasonNEQ(v string) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReason), v))
	})
}

// ReasonIn applies the In predicate on the "reason" field.
func ReasonIn(vs ...string) predicate.Submission {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Submission(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldReason), v...))
	})
}

// ReasonNotIn applies the NotIn predicate on the "reason" field.
func ReasonNotIn(vs ...string) predicate.Submission {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Submission(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldReason), v...))
	})
}

// ReasonGT applies the GT predicate on the "reason" field.
func ReasonGT(v string) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReason), v))
	})
}

// ReasonGTE applies the GTE predicate on the "reason" field.
func ReasonGTE(v string) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReason), v))
	})
}

// ReasonLT applies the LT predicate on the "reason" field.
func ReasonLT(v string) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReason), v))
	})
}

// ReasonLTE applies the LTE predicate on the "reason" field.
func ReasonLTE(v string) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReason), v))
	})
}

// ReasonContains applies the Contains predicate on the "reason" field.
func ReasonContains(v string) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldReason), v))
	})
}

// ReasonHasPrefix applies the HasPrefix predicate on the "reason" field.
func ReasonHasPrefix(v string) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldReason), v))
	})
}

// ReasonHasSuffix applies the HasSuffix predicate on the "reason" field.
func ReasonHasSuffix(v string) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldReason), v))
	})
}

// ReasonIsNil applies the IsNil predicate on the "reason" field.
func ReasonIsNil() predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldReason)))
	})
}

// ReasonNotNil applies the NotNil predicate on the "reason" field.
func ReasonNotNil() predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldReason)))
	})
}

// ReasonEqualFold applies the EqualFold predicate on the "reason" field.
func ReasonEqualFold(v string) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldReason), v))
	})
}

// ReasonContainsFold applies the ContainsFold predicate on the "reason" field.
func ReasonContainsFold(v string) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldReason), v))
	})
}

// GitRepoEQ applies the EQ predicate on the "git_repo" field.
func GitRepoEQ(v string) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGitRepo), v))
	})
}

// GitRepoNEQ applies the NEQ predicate on the "git_repo" field.
func GitRepoNEQ(v string) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGitRepo), v))
	})
}

// GitRepoIn applies the In predicate on the "git_repo" field.
func GitRepoIn(vs ...string) predicate.Submission {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Submission(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldGitRepo), v...))
	})
}

// GitRepoNotIn applies the NotIn predicate on the "git_repo" field.
func GitRepoNotIn(vs ...string) predicate.Submission {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Submission(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldGitRepo), v...))
	})
}

// GitRepoGT applies the GT predicate on the "git_repo" field.
func GitRepoGT(v string) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGitRepo), v))
	})
}

// GitRepoGTE applies the GTE predicate on the "git_repo" field.
func GitRepoGTE(v string) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGitRepo), v))
	})
}

// GitRepoLT applies the LT predicate on the "git_repo" field.
func GitRepoLT(v string) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGitRepo), v))
	})
}

// GitRepoLTE applies the LTE predicate on the "git_repo" field.
func GitRepoLTE(v string) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGitRepo), v))
	})
}

// GitRepoContains applies the Contains predicate on the "git_repo" field.
func GitRepoContains(v string) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldGitRepo), v))
	})
}

// GitRepoHasPrefix applies the HasPrefix predicate on the "git_repo" field.
func GitRepoHasPrefix(v string) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldGitRepo), v))
	})
}

// GitRepoHasSuffix applies the HasSuffix predicate on the "git_repo" field.
func GitRepoHasSuffix(v string) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldGitRepo), v))
	})
}

// GitRepoIsNil applies the IsNil predicate on the "git_repo" field.
func GitRepoIsNil() predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldGitRepo)))
	})
}

// GitRepoNotNil applies the NotNil predicate on the "git_repo" field.
func GitRepoNotNil() predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldGitRepo)))
	})
}

// GitRepoEqualFold applies the EqualFold predicate on the "git_repo" field.
func GitRepoEqualFold(v string) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldGitRepo), v))
	})
}

// GitRepoContainsFold applies the ContainsFold predicate on the "git_repo" field.
func GitRepoContainsFold(v string) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldGitRepo), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Submission {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Submission(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Submission {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Submission(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// ShareIDEQ applies the EQ predicate on the "share_id" field.
func ShareIDEQ(v string) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShareID), v))
	})
}

// ShareIDNEQ applies the NEQ predicate on the "share_id" field.
func ShareIDNEQ(v string) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShareID), v))
	})
}

// ShareIDIn applies the In predicate on the "share_id" field.
func ShareIDIn(vs ...string) predicate.Submission {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Submission(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldShareID), v...))
	})
}

// ShareIDNotIn applies the NotIn predicate on the "share_id" field.
func ShareIDNotIn(vs ...string) predicate.Submission {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Submission(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldShareID), v...))
	})
}

// ShareIDGT applies the GT predicate on the "share_id" field.
func ShareIDGT(v string) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShareID), v))
	})
}

// ShareIDGTE applies the GTE predicate on the "share_id" field.
func ShareIDGTE(v string) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShareID), v))
	})
}

// ShareIDLT applies the LT predicate on the "share_id" field.
func ShareIDLT(v string) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShareID), v))
	})
}

// ShareIDLTE applies the LTE predicate on the "share_id" field.
func ShareIDLTE(v string) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShareID), v))
	})
}

// ShareIDContains applies the Contains predicate on the "share_id" field.
func ShareIDContains(v string) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldShareID), v))
	})
}

// ShareIDHasPrefix applies the HasPrefix predicate on the "share_id" field.
func ShareIDHasPrefix(v string) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldShareID), v))
	})
}

// ShareIDHasSuffix applies the HasSuffix predicate on the "share_id" field.
func ShareIDHasSuffix(v string) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldShareID), v))
	})
}

// ShareIDIsNil applies the IsNil predicate on the "share_id" field.
func ShareIDIsNil() predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldShareID)))
	})
}

// ShareIDNotNil applies the NotNil predicate on the "share_id" field.
func ShareIDNotNil() predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldShareID)))
	})
}

// ShareIDEqualFold applies the EqualFold predicate on the "share_id" field.
func ShareIDEqualFold(v string) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldShareID), v))
	})
}

// ShareIDContainsFold applies the ContainsFold predicate on the "share_id" field.
func ShareIDContainsFold(v string) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldShareID), v))
	})
}

// SubmissionSourceSizeBytesEQ applies the EQ predicate on the "submission_source_size_bytes" field.
func SubmissionSourceSizeBytesEQ(v int) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSubmissionSourceSizeBytes), v))
	})
}

// SubmissionSourceSizeBytesNEQ applies the NEQ predicate on the "submission_source_size_bytes" field.
func SubmissionSourceSizeBytesNEQ(v int) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSubmissionSourceSizeBytes), v))
	})
}

// SubmissionSourceSizeBytesIn applies the In predicate on the "submission_source_size_bytes" field.
func SubmissionSourceSizeBytesIn(vs ...int) predicate.Submission {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Submission(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSubmissionSourceSizeBytes), v...))
	})
}

// SubmissionSourceSizeBytesNotIn applies the NotIn predicate on the "submission_source_size_bytes" field.
func SubmissionSourceSizeBytesNotIn(vs ...int) predicate.Submission {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Submission(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSubmissionSourceSizeBytes), v...))
	})
}

// SubmissionSourceSizeBytesGT applies the GT predicate on the "submission_source_size_bytes" field.
func SubmissionSourceSizeBytesGT(v int) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSubmissionSourceSizeBytes), v))
	})
}

// SubmissionSourceSizeBytesGTE applies the GTE predicate on the "submission_source_size_bytes" field.
func SubmissionSourceSizeBytesGTE(v int) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSubmissionSourceSizeBytes), v))
	})
}

// SubmissionSourceSizeBytesLT applies the LT predicate on the "submission_source_size_bytes" field.
func SubmissionSourceSizeBytesLT(v int) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSubmissionSourceSizeBytes), v))
	})
}

// SubmissionSourceSizeBytesLTE applies the LTE predicate on the "submission_source_size_bytes" field.
func SubmissionSourceSizeBytesLTE(v int) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSubmissionSourceSizeBytes), v))
	})
}

// SubmissionTargetSizeBytesEQ applies the EQ predicate on the "submission_target_size_bytes" field.
func SubmissionTargetSizeBytesEQ(v int) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSubmissionTargetSizeBytes), v))
	})
}

// SubmissionTargetSizeBytesNEQ applies the NEQ predicate on the "submission_target_size_bytes" field.
func SubmissionTargetSizeBytesNEQ(v int) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSubmissionTargetSizeBytes), v))
	})
}

// SubmissionTargetSizeBytesIn applies the In predicate on the "submission_target_size_bytes" field.
func SubmissionTargetSizeBytesIn(vs ...int) predicate.Submission {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Submission(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSubmissionTargetSizeBytes), v...))
	})
}

// SubmissionTargetSizeBytesNotIn applies the NotIn predicate on the "submission_target_size_bytes" field.
func SubmissionTargetSizeBytesNotIn(vs ...int) predicate.Submission {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Submission(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSubmissionTargetSizeBytes), v...))
	})
}

// SubmissionTargetSizeBytesGT applies the GT predicate on the "submission_target_size_bytes" field.
func SubmissionTargetSizeBytesGT(v int) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSubmissionTargetSizeBytes), v))
	})
}

// SubmissionTargetSizeBytesGTE applies the GTE predicate on the "submission_target_size_bytes" field.
func SubmissionTargetSizeBytesGTE(v int) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSubmissionTargetSizeBytes), v))
	})
}

// SubmissionTargetSizeBytesLT applies the LT predicate on the "submission_target_size_bytes" field.
func SubmissionTargetSizeBytesLT(v int) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSubmissionTargetSizeBytes), v))
	})
}

// SubmissionTargetSizeBytesLTE applies the LTE predicate on the "submission_target_size_bytes" field.
func SubmissionTargetSizeBytesLTE(v int) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSubmissionTargetSizeBytes), v))
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Submission) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Submission) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Submission) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		p(s.Not())
	})
}
