// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/tereus-project/tereus-api/ent/submission"
	"github.com/tereus-project/tereus-api/ent/user"
)

// Submission is the model entity for the Submission schema.
type Submission struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// SourceLanguage holds the value of the "source_language" field.
	SourceLanguage string `json:"source_language,omitempty"`
	// TargetLanguage holds the value of the "target_language" field.
	TargetLanguage string `json:"target_language,omitempty"`
	// Status holds the value of the "status" field.
	Status submission.Status `json:"status,omitempty"`
	// Reason holds the value of the "reason" field.
	Reason string `json:"reason,omitempty"`
	// GitRepo holds the value of the "git_repo" field.
	GitRepo string `json:"git_repo,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SubmissionQuery when eager-loading is set.
	Edges            SubmissionEdges `json:"edges"`
	user_submissions *uuid.UUID
}

// SubmissionEdges holds the relations/edges for other nodes in the graph.
type SubmissionEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubmissionEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Submission) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case submission.FieldSourceLanguage, submission.FieldTargetLanguage, submission.FieldStatus, submission.FieldReason, submission.FieldGitRepo:
			values[i] = new(sql.NullString)
		case submission.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case submission.FieldID:
			values[i] = new(uuid.UUID)
		case submission.ForeignKeys[0]: // user_submissions
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Submission", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Submission fields.
func (s *Submission) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case submission.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				s.ID = *value
			}
		case submission.FieldSourceLanguage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field source_language", values[i])
			} else if value.Valid {
				s.SourceLanguage = value.String
			}
		case submission.FieldTargetLanguage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field target_language", values[i])
			} else if value.Valid {
				s.TargetLanguage = value.String
			}
		case submission.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				s.Status = submission.Status(value.String)
			}
		case submission.FieldReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reason", values[i])
			} else if value.Valid {
				s.Reason = value.String
			}
		case submission.FieldGitRepo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field git_repo", values[i])
			} else if value.Valid {
				s.GitRepo = value.String
			}
		case submission.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		case submission.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_submissions", values[i])
			} else if value.Valid {
				s.user_submissions = new(uuid.UUID)
				*s.user_submissions = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the Submission entity.
func (s *Submission) QueryUser() *UserQuery {
	return (&SubmissionClient{config: s.config}).QueryUser(s)
}

// Update returns a builder for updating this Submission.
// Note that you need to call Submission.Unwrap() before calling this method if this Submission
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Submission) Update() *SubmissionUpdateOne {
	return (&SubmissionClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the Submission entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Submission) Unwrap() *Submission {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Submission is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Submission) String() string {
	var builder strings.Builder
	builder.WriteString("Submission(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteString(", source_language=")
	builder.WriteString(s.SourceLanguage)
	builder.WriteString(", target_language=")
	builder.WriteString(s.TargetLanguage)
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", s.Status))
	builder.WriteString(", reason=")
	builder.WriteString(s.Reason)
	builder.WriteString(", git_repo=")
	builder.WriteString(s.GitRepo)
	builder.WriteString(", created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Submissions is a parsable slice of Submission.
type Submissions []*Submission

func (s Submissions) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
