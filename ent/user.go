// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/tereus-project/tereus-api/ent/subscription"
	"github.com/tereus-project/tereus-api/ent/user"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Password holds the value of the "password" field.
	Password string `json:"password,omitempty"`
	// GithubUserID holds the value of the "github_user_id" field.
	GithubUserID int64 `json:"github_user_id,omitempty"`
	// GithubAccessToken holds the value of the "github_access_token" field.
	GithubAccessToken string `json:"github_access_token,omitempty"`
	// GitlabUserID holds the value of the "gitlab_user_id" field.
	GitlabUserID int `json:"gitlab_user_id,omitempty"`
	// GitlabAccessToken holds the value of the "gitlab_access_token" field.
	GitlabAccessToken string `json:"gitlab_access_token,omitempty"`
	// GitlabRefreshToken holds the value of the "gitlab_refresh_token" field.
	GitlabRefreshToken string `json:"gitlab_refresh_token,omitempty"`
	// GitlabAccessTokenExpiresAt holds the value of the "gitlab_access_token_expires_at" field.
	GitlabAccessTokenExpiresAt time.Time `json:"gitlab_access_token_expires_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges UserEdges `json:"edges"`
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// Tokens holds the value of the tokens edge.
	Tokens []*Token `json:"tokens,omitempty"`
	// Submissions holds the value of the submissions edge.
	Submissions []*Submission `json:"submissions,omitempty"`
	// Subscription holds the value of the subscription edge.
	Subscription *Subscription `json:"subscription,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// TokensOrErr returns the Tokens value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) TokensOrErr() ([]*Token, error) {
	if e.loadedTypes[0] {
		return e.Tokens, nil
	}
	return nil, &NotLoadedError{edge: "tokens"}
}

// SubmissionsOrErr returns the Submissions value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) SubmissionsOrErr() ([]*Submission, error) {
	if e.loadedTypes[1] {
		return e.Submissions, nil
	}
	return nil, &NotLoadedError{edge: "submissions"}
}

// SubscriptionOrErr returns the Subscription value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) SubscriptionOrErr() (*Subscription, error) {
	if e.loadedTypes[2] {
		if e.Subscription == nil {
			// The edge subscription was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: subscription.Label}
		}
		return e.Subscription, nil
	}
	return nil, &NotLoadedError{edge: "subscription"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldGithubUserID, user.FieldGitlabUserID:
			values[i] = new(sql.NullInt64)
		case user.FieldEmail, user.FieldPassword, user.FieldGithubAccessToken, user.FieldGitlabAccessToken, user.FieldGitlabRefreshToken:
			values[i] = new(sql.NullString)
		case user.FieldGitlabAccessTokenExpiresAt, user.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case user.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type User", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				u.ID = *value
			}
		case user.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				u.Email = value.String
			}
		case user.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				u.Password = value.String
			}
		case user.FieldGithubUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field github_user_id", values[i])
			} else if value.Valid {
				u.GithubUserID = value.Int64
			}
		case user.FieldGithubAccessToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field github_access_token", values[i])
			} else if value.Valid {
				u.GithubAccessToken = value.String
			}
		case user.FieldGitlabUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field gitlab_user_id", values[i])
			} else if value.Valid {
				u.GitlabUserID = int(value.Int64)
			}
		case user.FieldGitlabAccessToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field gitlab_access_token", values[i])
			} else if value.Valid {
				u.GitlabAccessToken = value.String
			}
		case user.FieldGitlabRefreshToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field gitlab_refresh_token", values[i])
			} else if value.Valid {
				u.GitlabRefreshToken = value.String
			}
		case user.FieldGitlabAccessTokenExpiresAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field gitlab_access_token_expires_at", values[i])
			} else if value.Valid {
				u.GitlabAccessTokenExpiresAt = value.Time
			}
		case user.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				u.CreatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryTokens queries the "tokens" edge of the User entity.
func (u *User) QueryTokens() *TokenQuery {
	return (&UserClient{config: u.config}).QueryTokens(u)
}

// QuerySubmissions queries the "submissions" edge of the User entity.
func (u *User) QuerySubmissions() *SubmissionQuery {
	return (&UserClient{config: u.config}).QuerySubmissions(u)
}

// QuerySubscription queries the "subscription" edge of the User entity.
func (u *User) QuerySubscription() *SubscriptionQuery {
	return (&UserClient{config: u.config}).QuerySubscription(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return (&UserClient{config: u.config}).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v", u.ID))
	builder.WriteString(", email=")
	builder.WriteString(u.Email)
	builder.WriteString(", password=")
	builder.WriteString(u.Password)
	builder.WriteString(", github_user_id=")
	builder.WriteString(fmt.Sprintf("%v", u.GithubUserID))
	builder.WriteString(", github_access_token=")
	builder.WriteString(u.GithubAccessToken)
	builder.WriteString(", gitlab_user_id=")
	builder.WriteString(fmt.Sprintf("%v", u.GitlabUserID))
	builder.WriteString(", gitlab_access_token=")
	builder.WriteString(u.GitlabAccessToken)
	builder.WriteString(", gitlab_refresh_token=")
	builder.WriteString(u.GitlabRefreshToken)
	builder.WriteString(", gitlab_access_token_expires_at=")
	builder.WriteString(u.GitlabAccessTokenExpiresAt.Format(time.ANSIC))
	builder.WriteString(", created_at=")
	builder.WriteString(u.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User

func (u Users) config(cfg config) {
	for _i := range u {
		u[_i].config = cfg
	}
}
