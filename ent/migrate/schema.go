// Code generated by entc, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// SubmissionsColumns holds the columns for the "submissions" table.
	SubmissionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "source_language", Type: field.TypeString},
		{Name: "target_language", Type: field.TypeString},
		{Name: "is_inline", Type: field.TypeBool, Default: false},
		{Name: "is_public", Type: field.TypeBool, Default: false},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"pending", "processing", "done", "failed", "cleaned"}, Default: "pending"},
		{Name: "reason", Type: field.TypeString, Nullable: true},
		{Name: "git_repo", Type: field.TypeString, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "share_id", Type: field.TypeString, Unique: true, Nullable: true},
		{Name: "submission_source_size_bytes", Type: field.TypeInt, Default: 0},
		{Name: "submission_target_size_bytes", Type: field.TypeInt, Default: 0},
		{Name: "processing_started_at", Type: field.TypeTime, Nullable: true},
		{Name: "processing_finished_at", Type: field.TypeTime, Nullable: true},
		{Name: "user_submissions", Type: field.TypeUUID},
	}
	// SubmissionsTable holds the schema information for the "submissions" table.
	SubmissionsTable = &schema.Table{
		Name:       "submissions",
		Columns:    SubmissionsColumns,
		PrimaryKey: []*schema.Column{SubmissionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "submissions_users_submissions",
				Columns:    []*schema.Column{SubmissionsColumns[14]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// SubscriptionsColumns holds the columns for the "subscriptions" table.
	SubscriptionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "stripe_customer_id", Type: field.TypeString, Nullable: true},
		{Name: "stripe_subscription_id", Type: field.TypeString, Nullable: true},
		{Name: "tier", Type: field.TypeEnum, Enums: []string{"free", "pro", "enterprise"}, Default: "free"},
		{Name: "expires_at", Type: field.TypeTime, Nullable: true},
		{Name: "cancelled", Type: field.TypeBool, Default: false},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "user_subscription", Type: field.TypeUUID, Unique: true},
	}
	// SubscriptionsTable holds the schema information for the "subscriptions" table.
	SubscriptionsTable = &schema.Table{
		Name:       "subscriptions",
		Columns:    SubscriptionsColumns,
		PrimaryKey: []*schema.Column{SubscriptionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "subscriptions_users_subscription",
				Columns:    []*schema.Column{SubscriptionsColumns[7]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// TokensColumns holds the columns for the "tokens" table.
	TokensColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "is_active", Type: field.TypeBool, Default: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "user_tokens", Type: field.TypeUUID},
	}
	// TokensTable holds the schema information for the "tokens" table.
	TokensTable = &schema.Table{
		Name:       "tokens",
		Columns:    TokensColumns,
		PrimaryKey: []*schema.Column{TokensColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "tokens_users_tokens",
				Columns:    []*schema.Column{TokensColumns[3]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "email", Type: field.TypeString, Unique: true},
		{Name: "password", Type: field.TypeString, Nullable: true},
		{Name: "github_access_token", Type: field.TypeString, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		SubmissionsTable,
		SubscriptionsTable,
		TokensTable,
		UsersTable,
	}
)

func init() {
	SubmissionsTable.ForeignKeys[0].RefTable = UsersTable
	SubscriptionsTable.ForeignKeys[0].RefTable = UsersTable
	TokensTable.ForeignKeys[0].RefTable = UsersTable
}
