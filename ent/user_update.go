// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/tereus-project/tereus-api/ent/predicate"
	"github.com/tereus-project/tereus-api/ent/submission"
	"github.com/tereus-project/tereus-api/ent/subscription"
	"github.com/tereus-project/tereus-api/ent/token"
	"github.com/tereus-project/tereus-api/ent/user"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetEmail sets the "email" field.
func (uu *UserUpdate) SetEmail(s string) *UserUpdate {
	uu.mutation.SetEmail(s)
	return uu
}

// SetPassword sets the "password" field.
func (uu *UserUpdate) SetPassword(s string) *UserUpdate {
	uu.mutation.SetPassword(s)
	return uu
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePassword(s *string) *UserUpdate {
	if s != nil {
		uu.SetPassword(*s)
	}
	return uu
}

// ClearPassword clears the value of the "password" field.
func (uu *UserUpdate) ClearPassword() *UserUpdate {
	uu.mutation.ClearPassword()
	return uu
}

// SetGithubUserID sets the "github_user_id" field.
func (uu *UserUpdate) SetGithubUserID(i int64) *UserUpdate {
	uu.mutation.ResetGithubUserID()
	uu.mutation.SetGithubUserID(i)
	return uu
}

// SetNillableGithubUserID sets the "github_user_id" field if the given value is not nil.
func (uu *UserUpdate) SetNillableGithubUserID(i *int64) *UserUpdate {
	if i != nil {
		uu.SetGithubUserID(*i)
	}
	return uu
}

// AddGithubUserID adds i to the "github_user_id" field.
func (uu *UserUpdate) AddGithubUserID(i int64) *UserUpdate {
	uu.mutation.AddGithubUserID(i)
	return uu
}

// ClearGithubUserID clears the value of the "github_user_id" field.
func (uu *UserUpdate) ClearGithubUserID() *UserUpdate {
	uu.mutation.ClearGithubUserID()
	return uu
}

// SetGithubAccessToken sets the "github_access_token" field.
func (uu *UserUpdate) SetGithubAccessToken(s string) *UserUpdate {
	uu.mutation.SetGithubAccessToken(s)
	return uu
}

// SetNillableGithubAccessToken sets the "github_access_token" field if the given value is not nil.
func (uu *UserUpdate) SetNillableGithubAccessToken(s *string) *UserUpdate {
	if s != nil {
		uu.SetGithubAccessToken(*s)
	}
	return uu
}

// ClearGithubAccessToken clears the value of the "github_access_token" field.
func (uu *UserUpdate) ClearGithubAccessToken() *UserUpdate {
	uu.mutation.ClearGithubAccessToken()
	return uu
}

// SetGitlabUserID sets the "gitlab_user_id" field.
func (uu *UserUpdate) SetGitlabUserID(i int) *UserUpdate {
	uu.mutation.ResetGitlabUserID()
	uu.mutation.SetGitlabUserID(i)
	return uu
}

// SetNillableGitlabUserID sets the "gitlab_user_id" field if the given value is not nil.
func (uu *UserUpdate) SetNillableGitlabUserID(i *int) *UserUpdate {
	if i != nil {
		uu.SetGitlabUserID(*i)
	}
	return uu
}

// AddGitlabUserID adds i to the "gitlab_user_id" field.
func (uu *UserUpdate) AddGitlabUserID(i int) *UserUpdate {
	uu.mutation.AddGitlabUserID(i)
	return uu
}

// ClearGitlabUserID clears the value of the "gitlab_user_id" field.
func (uu *UserUpdate) ClearGitlabUserID() *UserUpdate {
	uu.mutation.ClearGitlabUserID()
	return uu
}

// SetGitlabAccessToken sets the "gitlab_access_token" field.
func (uu *UserUpdate) SetGitlabAccessToken(s string) *UserUpdate {
	uu.mutation.SetGitlabAccessToken(s)
	return uu
}

// SetNillableGitlabAccessToken sets the "gitlab_access_token" field if the given value is not nil.
func (uu *UserUpdate) SetNillableGitlabAccessToken(s *string) *UserUpdate {
	if s != nil {
		uu.SetGitlabAccessToken(*s)
	}
	return uu
}

// ClearGitlabAccessToken clears the value of the "gitlab_access_token" field.
func (uu *UserUpdate) ClearGitlabAccessToken() *UserUpdate {
	uu.mutation.ClearGitlabAccessToken()
	return uu
}

// SetGitlabRefreshToken sets the "gitlab_refresh_token" field.
func (uu *UserUpdate) SetGitlabRefreshToken(s string) *UserUpdate {
	uu.mutation.SetGitlabRefreshToken(s)
	return uu
}

// SetNillableGitlabRefreshToken sets the "gitlab_refresh_token" field if the given value is not nil.
func (uu *UserUpdate) SetNillableGitlabRefreshToken(s *string) *UserUpdate {
	if s != nil {
		uu.SetGitlabRefreshToken(*s)
	}
	return uu
}

// ClearGitlabRefreshToken clears the value of the "gitlab_refresh_token" field.
func (uu *UserUpdate) ClearGitlabRefreshToken() *UserUpdate {
	uu.mutation.ClearGitlabRefreshToken()
	return uu
}

// SetGitlabAccessTokenExpiresAt sets the "gitlab_access_token_expires_at" field.
func (uu *UserUpdate) SetGitlabAccessTokenExpiresAt(t time.Time) *UserUpdate {
	uu.mutation.SetGitlabAccessTokenExpiresAt(t)
	return uu
}

// SetNillableGitlabAccessTokenExpiresAt sets the "gitlab_access_token_expires_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillableGitlabAccessTokenExpiresAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetGitlabAccessTokenExpiresAt(*t)
	}
	return uu
}

// ClearGitlabAccessTokenExpiresAt clears the value of the "gitlab_access_token_expires_at" field.
func (uu *UserUpdate) ClearGitlabAccessTokenExpiresAt() *UserUpdate {
	uu.mutation.ClearGitlabAccessTokenExpiresAt()
	return uu
}

// SetCreatedAt sets the "created_at" field.
func (uu *UserUpdate) SetCreatedAt(t time.Time) *UserUpdate {
	uu.mutation.SetCreatedAt(t)
	return uu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillableCreatedAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetCreatedAt(*t)
	}
	return uu
}

// AddTokenIDs adds the "tokens" edge to the Token entity by IDs.
func (uu *UserUpdate) AddTokenIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.AddTokenIDs(ids...)
	return uu
}

// AddTokens adds the "tokens" edges to the Token entity.
func (uu *UserUpdate) AddTokens(t ...*Token) *UserUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uu.AddTokenIDs(ids...)
}

// AddSubmissionIDs adds the "submissions" edge to the Submission entity by IDs.
func (uu *UserUpdate) AddSubmissionIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.AddSubmissionIDs(ids...)
	return uu
}

// AddSubmissions adds the "submissions" edges to the Submission entity.
func (uu *UserUpdate) AddSubmissions(s ...*Submission) *UserUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uu.AddSubmissionIDs(ids...)
}

// SetSubscriptionID sets the "subscription" edge to the Subscription entity by ID.
func (uu *UserUpdate) SetSubscriptionID(id uuid.UUID) *UserUpdate {
	uu.mutation.SetSubscriptionID(id)
	return uu
}

// SetNillableSubscriptionID sets the "subscription" edge to the Subscription entity by ID if the given value is not nil.
func (uu *UserUpdate) SetNillableSubscriptionID(id *uuid.UUID) *UserUpdate {
	if id != nil {
		uu = uu.SetSubscriptionID(*id)
	}
	return uu
}

// SetSubscription sets the "subscription" edge to the Subscription entity.
func (uu *UserUpdate) SetSubscription(s *Subscription) *UserUpdate {
	return uu.SetSubscriptionID(s.ID)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearTokens clears all "tokens" edges to the Token entity.
func (uu *UserUpdate) ClearTokens() *UserUpdate {
	uu.mutation.ClearTokens()
	return uu
}

// RemoveTokenIDs removes the "tokens" edge to Token entities by IDs.
func (uu *UserUpdate) RemoveTokenIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.RemoveTokenIDs(ids...)
	return uu
}

// RemoveTokens removes "tokens" edges to Token entities.
func (uu *UserUpdate) RemoveTokens(t ...*Token) *UserUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uu.RemoveTokenIDs(ids...)
}

// ClearSubmissions clears all "submissions" edges to the Submission entity.
func (uu *UserUpdate) ClearSubmissions() *UserUpdate {
	uu.mutation.ClearSubmissions()
	return uu
}

// RemoveSubmissionIDs removes the "submissions" edge to Submission entities by IDs.
func (uu *UserUpdate) RemoveSubmissionIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.RemoveSubmissionIDs(ids...)
	return uu
}

// RemoveSubmissions removes "submissions" edges to Submission entities.
func (uu *UserUpdate) RemoveSubmissions(s ...*Submission) *UserUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uu.RemoveSubmissionIDs(ids...)
}

// ClearSubscription clears the "subscription" edge to the Subscription entity.
func (uu *UserUpdate) ClearSubscription() *UserUpdate {
	uu.mutation.ClearSubscription()
	return uu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(uu.hooks) == 0 {
		affected, err = uu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uu.mutation = mutation
			affected, err = uu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(uu.hooks) - 1; i >= 0; i-- {
			if uu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: user.FieldID,
			},
		},
	}
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldEmail,
		})
	}
	if value, ok := uu.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldPassword,
		})
	}
	if uu.mutation.PasswordCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: user.FieldPassword,
		})
	}
	if value, ok := uu.mutation.GithubUserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: user.FieldGithubUserID,
		})
	}
	if value, ok := uu.mutation.AddedGithubUserID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: user.FieldGithubUserID,
		})
	}
	if uu.mutation.GithubUserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: user.FieldGithubUserID,
		})
	}
	if value, ok := uu.mutation.GithubAccessToken(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldGithubAccessToken,
		})
	}
	if uu.mutation.GithubAccessTokenCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: user.FieldGithubAccessToken,
		})
	}
	if value, ok := uu.mutation.GitlabUserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldGitlabUserID,
		})
	}
	if value, ok := uu.mutation.AddedGitlabUserID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldGitlabUserID,
		})
	}
	if uu.mutation.GitlabUserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: user.FieldGitlabUserID,
		})
	}
	if value, ok := uu.mutation.GitlabAccessToken(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldGitlabAccessToken,
		})
	}
	if uu.mutation.GitlabAccessTokenCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: user.FieldGitlabAccessToken,
		})
	}
	if value, ok := uu.mutation.GitlabRefreshToken(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldGitlabRefreshToken,
		})
	}
	if uu.mutation.GitlabRefreshTokenCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: user.FieldGitlabRefreshToken,
		})
	}
	if value, ok := uu.mutation.GitlabAccessTokenExpiresAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldGitlabAccessTokenExpiresAt,
		})
	}
	if uu.mutation.GitlabAccessTokenExpiresAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: user.FieldGitlabAccessTokenExpiresAt,
		})
	}
	if value, ok := uu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldCreatedAt,
		})
	}
	if uu.mutation.TokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TokensTable,
			Columns: []string{user.TokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: token.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedTokensIDs(); len(nodes) > 0 && !uu.mutation.TokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TokensTable,
			Columns: []string{user.TokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: token.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.TokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TokensTable,
			Columns: []string{user.TokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: token.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.SubmissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SubmissionsTable,
			Columns: []string{user.SubmissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: submission.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedSubmissionsIDs(); len(nodes) > 0 && !uu.mutation.SubmissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SubmissionsTable,
			Columns: []string{user.SubmissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: submission.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.SubmissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SubmissionsTable,
			Columns: []string{user.SubmissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: submission.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.SubscriptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.SubscriptionTable,
			Columns: []string{user.SubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: subscription.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.SubscriptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.SubscriptionTable,
			Columns: []string{user.SubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: subscription.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetEmail sets the "email" field.
func (uuo *UserUpdateOne) SetEmail(s string) *UserUpdateOne {
	uuo.mutation.SetEmail(s)
	return uuo
}

// SetPassword sets the "password" field.
func (uuo *UserUpdateOne) SetPassword(s string) *UserUpdateOne {
	uuo.mutation.SetPassword(s)
	return uuo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePassword(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPassword(*s)
	}
	return uuo
}

// ClearPassword clears the value of the "password" field.
func (uuo *UserUpdateOne) ClearPassword() *UserUpdateOne {
	uuo.mutation.ClearPassword()
	return uuo
}

// SetGithubUserID sets the "github_user_id" field.
func (uuo *UserUpdateOne) SetGithubUserID(i int64) *UserUpdateOne {
	uuo.mutation.ResetGithubUserID()
	uuo.mutation.SetGithubUserID(i)
	return uuo
}

// SetNillableGithubUserID sets the "github_user_id" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableGithubUserID(i *int64) *UserUpdateOne {
	if i != nil {
		uuo.SetGithubUserID(*i)
	}
	return uuo
}

// AddGithubUserID adds i to the "github_user_id" field.
func (uuo *UserUpdateOne) AddGithubUserID(i int64) *UserUpdateOne {
	uuo.mutation.AddGithubUserID(i)
	return uuo
}

// ClearGithubUserID clears the value of the "github_user_id" field.
func (uuo *UserUpdateOne) ClearGithubUserID() *UserUpdateOne {
	uuo.mutation.ClearGithubUserID()
	return uuo
}

// SetGithubAccessToken sets the "github_access_token" field.
func (uuo *UserUpdateOne) SetGithubAccessToken(s string) *UserUpdateOne {
	uuo.mutation.SetGithubAccessToken(s)
	return uuo
}

// SetNillableGithubAccessToken sets the "github_access_token" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableGithubAccessToken(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetGithubAccessToken(*s)
	}
	return uuo
}

// ClearGithubAccessToken clears the value of the "github_access_token" field.
func (uuo *UserUpdateOne) ClearGithubAccessToken() *UserUpdateOne {
	uuo.mutation.ClearGithubAccessToken()
	return uuo
}

// SetGitlabUserID sets the "gitlab_user_id" field.
func (uuo *UserUpdateOne) SetGitlabUserID(i int) *UserUpdateOne {
	uuo.mutation.ResetGitlabUserID()
	uuo.mutation.SetGitlabUserID(i)
	return uuo
}

// SetNillableGitlabUserID sets the "gitlab_user_id" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableGitlabUserID(i *int) *UserUpdateOne {
	if i != nil {
		uuo.SetGitlabUserID(*i)
	}
	return uuo
}

// AddGitlabUserID adds i to the "gitlab_user_id" field.
func (uuo *UserUpdateOne) AddGitlabUserID(i int) *UserUpdateOne {
	uuo.mutation.AddGitlabUserID(i)
	return uuo
}

// ClearGitlabUserID clears the value of the "gitlab_user_id" field.
func (uuo *UserUpdateOne) ClearGitlabUserID() *UserUpdateOne {
	uuo.mutation.ClearGitlabUserID()
	return uuo
}

// SetGitlabAccessToken sets the "gitlab_access_token" field.
func (uuo *UserUpdateOne) SetGitlabAccessToken(s string) *UserUpdateOne {
	uuo.mutation.SetGitlabAccessToken(s)
	return uuo
}

// SetNillableGitlabAccessToken sets the "gitlab_access_token" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableGitlabAccessToken(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetGitlabAccessToken(*s)
	}
	return uuo
}

// ClearGitlabAccessToken clears the value of the "gitlab_access_token" field.
func (uuo *UserUpdateOne) ClearGitlabAccessToken() *UserUpdateOne {
	uuo.mutation.ClearGitlabAccessToken()
	return uuo
}

// SetGitlabRefreshToken sets the "gitlab_refresh_token" field.
func (uuo *UserUpdateOne) SetGitlabRefreshToken(s string) *UserUpdateOne {
	uuo.mutation.SetGitlabRefreshToken(s)
	return uuo
}

// SetNillableGitlabRefreshToken sets the "gitlab_refresh_token" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableGitlabRefreshToken(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetGitlabRefreshToken(*s)
	}
	return uuo
}

// ClearGitlabRefreshToken clears the value of the "gitlab_refresh_token" field.
func (uuo *UserUpdateOne) ClearGitlabRefreshToken() *UserUpdateOne {
	uuo.mutation.ClearGitlabRefreshToken()
	return uuo
}

// SetGitlabAccessTokenExpiresAt sets the "gitlab_access_token_expires_at" field.
func (uuo *UserUpdateOne) SetGitlabAccessTokenExpiresAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetGitlabAccessTokenExpiresAt(t)
	return uuo
}

// SetNillableGitlabAccessTokenExpiresAt sets the "gitlab_access_token_expires_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableGitlabAccessTokenExpiresAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetGitlabAccessTokenExpiresAt(*t)
	}
	return uuo
}

// ClearGitlabAccessTokenExpiresAt clears the value of the "gitlab_access_token_expires_at" field.
func (uuo *UserUpdateOne) ClearGitlabAccessTokenExpiresAt() *UserUpdateOne {
	uuo.mutation.ClearGitlabAccessTokenExpiresAt()
	return uuo
}

// SetCreatedAt sets the "created_at" field.
func (uuo *UserUpdateOne) SetCreatedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetCreatedAt(t)
	return uuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableCreatedAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetCreatedAt(*t)
	}
	return uuo
}

// AddTokenIDs adds the "tokens" edge to the Token entity by IDs.
func (uuo *UserUpdateOne) AddTokenIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.AddTokenIDs(ids...)
	return uuo
}

// AddTokens adds the "tokens" edges to the Token entity.
func (uuo *UserUpdateOne) AddTokens(t ...*Token) *UserUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uuo.AddTokenIDs(ids...)
}

// AddSubmissionIDs adds the "submissions" edge to the Submission entity by IDs.
func (uuo *UserUpdateOne) AddSubmissionIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.AddSubmissionIDs(ids...)
	return uuo
}

// AddSubmissions adds the "submissions" edges to the Submission entity.
func (uuo *UserUpdateOne) AddSubmissions(s ...*Submission) *UserUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uuo.AddSubmissionIDs(ids...)
}

// SetSubscriptionID sets the "subscription" edge to the Subscription entity by ID.
func (uuo *UserUpdateOne) SetSubscriptionID(id uuid.UUID) *UserUpdateOne {
	uuo.mutation.SetSubscriptionID(id)
	return uuo
}

// SetNillableSubscriptionID sets the "subscription" edge to the Subscription entity by ID if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableSubscriptionID(id *uuid.UUID) *UserUpdateOne {
	if id != nil {
		uuo = uuo.SetSubscriptionID(*id)
	}
	return uuo
}

// SetSubscription sets the "subscription" edge to the Subscription entity.
func (uuo *UserUpdateOne) SetSubscription(s *Subscription) *UserUpdateOne {
	return uuo.SetSubscriptionID(s.ID)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearTokens clears all "tokens" edges to the Token entity.
func (uuo *UserUpdateOne) ClearTokens() *UserUpdateOne {
	uuo.mutation.ClearTokens()
	return uuo
}

// RemoveTokenIDs removes the "tokens" edge to Token entities by IDs.
func (uuo *UserUpdateOne) RemoveTokenIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.RemoveTokenIDs(ids...)
	return uuo
}

// RemoveTokens removes "tokens" edges to Token entities.
func (uuo *UserUpdateOne) RemoveTokens(t ...*Token) *UserUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uuo.RemoveTokenIDs(ids...)
}

// ClearSubmissions clears all "submissions" edges to the Submission entity.
func (uuo *UserUpdateOne) ClearSubmissions() *UserUpdateOne {
	uuo.mutation.ClearSubmissions()
	return uuo
}

// RemoveSubmissionIDs removes the "submissions" edge to Submission entities by IDs.
func (uuo *UserUpdateOne) RemoveSubmissionIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.RemoveSubmissionIDs(ids...)
	return uuo
}

// RemoveSubmissions removes "submissions" edges to Submission entities.
func (uuo *UserUpdateOne) RemoveSubmissions(s ...*Submission) *UserUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uuo.RemoveSubmissionIDs(ids...)
}

// ClearSubscription clears the "subscription" edge to the Subscription entity.
func (uuo *UserUpdateOne) ClearSubscription() *UserUpdateOne {
	uuo.mutation.ClearSubscription()
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	var (
		err  error
		node *User
	)
	if len(uuo.hooks) == 0 {
		node, err = uuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uuo.mutation = mutation
			node, err = uuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uuo.hooks) - 1; i >= 0; i-- {
			if uuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: user.FieldID,
			},
		},
	}
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldEmail,
		})
	}
	if value, ok := uuo.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldPassword,
		})
	}
	if uuo.mutation.PasswordCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: user.FieldPassword,
		})
	}
	if value, ok := uuo.mutation.GithubUserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: user.FieldGithubUserID,
		})
	}
	if value, ok := uuo.mutation.AddedGithubUserID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: user.FieldGithubUserID,
		})
	}
	if uuo.mutation.GithubUserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: user.FieldGithubUserID,
		})
	}
	if value, ok := uuo.mutation.GithubAccessToken(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldGithubAccessToken,
		})
	}
	if uuo.mutation.GithubAccessTokenCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: user.FieldGithubAccessToken,
		})
	}
	if value, ok := uuo.mutation.GitlabUserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldGitlabUserID,
		})
	}
	if value, ok := uuo.mutation.AddedGitlabUserID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldGitlabUserID,
		})
	}
	if uuo.mutation.GitlabUserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: user.FieldGitlabUserID,
		})
	}
	if value, ok := uuo.mutation.GitlabAccessToken(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldGitlabAccessToken,
		})
	}
	if uuo.mutation.GitlabAccessTokenCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: user.FieldGitlabAccessToken,
		})
	}
	if value, ok := uuo.mutation.GitlabRefreshToken(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldGitlabRefreshToken,
		})
	}
	if uuo.mutation.GitlabRefreshTokenCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: user.FieldGitlabRefreshToken,
		})
	}
	if value, ok := uuo.mutation.GitlabAccessTokenExpiresAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldGitlabAccessTokenExpiresAt,
		})
	}
	if uuo.mutation.GitlabAccessTokenExpiresAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: user.FieldGitlabAccessTokenExpiresAt,
		})
	}
	if value, ok := uuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldCreatedAt,
		})
	}
	if uuo.mutation.TokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TokensTable,
			Columns: []string{user.TokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: token.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedTokensIDs(); len(nodes) > 0 && !uuo.mutation.TokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TokensTable,
			Columns: []string{user.TokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: token.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.TokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TokensTable,
			Columns: []string{user.TokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: token.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.SubmissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SubmissionsTable,
			Columns: []string{user.SubmissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: submission.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedSubmissionsIDs(); len(nodes) > 0 && !uuo.mutation.SubmissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SubmissionsTable,
			Columns: []string{user.SubmissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: submission.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.SubmissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SubmissionsTable,
			Columns: []string{user.SubmissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: submission.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.SubscriptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.SubscriptionTable,
			Columns: []string{user.SubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: subscription.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.SubscriptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.SubscriptionTable,
			Columns: []string{user.SubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: subscription.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
