// Code generated by entc, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/google/uuid"
	"github.com/tereus-project/tereus-api/ent/schema"
	"github.com/tereus-project/tereus-api/ent/submission"
	"github.com/tereus-project/tereus-api/ent/subscription"
	"github.com/tereus-project/tereus-api/ent/token"
	"github.com/tereus-project/tereus-api/ent/user"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	submissionFields := schema.Submission{}.Fields()
	_ = submissionFields
	// submissionDescIsInline is the schema descriptor for is_inline field.
	submissionDescIsInline := submissionFields[3].Descriptor()
	// submission.DefaultIsInline holds the default value on creation for the is_inline field.
	submission.DefaultIsInline = submissionDescIsInline.Default.(bool)
	// submissionDescIsPublic is the schema descriptor for is_public field.
	submissionDescIsPublic := submissionFields[4].Descriptor()
	// submission.DefaultIsPublic holds the default value on creation for the is_public field.
	submission.DefaultIsPublic = submissionDescIsPublic.Default.(bool)
	// submissionDescCreatedAt is the schema descriptor for created_at field.
	submissionDescCreatedAt := submissionFields[8].Descriptor()
	// submission.DefaultCreatedAt holds the default value on creation for the created_at field.
	submission.DefaultCreatedAt = submissionDescCreatedAt.Default.(func() time.Time)
	// submissionDescSubmissionSourceSizeBytes is the schema descriptor for submission_source_size_bytes field.
	submissionDescSubmissionSourceSizeBytes := submissionFields[10].Descriptor()
	// submission.DefaultSubmissionSourceSizeBytes holds the default value on creation for the submission_source_size_bytes field.
	submission.DefaultSubmissionSourceSizeBytes = submissionDescSubmissionSourceSizeBytes.Default.(int)
	// submissionDescSubmissionTargetSizeBytes is the schema descriptor for submission_target_size_bytes field.
	submissionDescSubmissionTargetSizeBytes := submissionFields[11].Descriptor()
	// submission.DefaultSubmissionTargetSizeBytes holds the default value on creation for the submission_target_size_bytes field.
	submission.DefaultSubmissionTargetSizeBytes = submissionDescSubmissionTargetSizeBytes.Default.(int)
	// submissionDescID is the schema descriptor for id field.
	submissionDescID := submissionFields[0].Descriptor()
	// submission.DefaultID holds the default value on creation for the id field.
	submission.DefaultID = submissionDescID.Default.(func() uuid.UUID)
	subscriptionFields := schema.Subscription{}.Fields()
	_ = subscriptionFields
	// subscriptionDescCancelled is the schema descriptor for cancelled field.
	subscriptionDescCancelled := subscriptionFields[5].Descriptor()
	// subscription.DefaultCancelled holds the default value on creation for the cancelled field.
	subscription.DefaultCancelled = subscriptionDescCancelled.Default.(bool)
	// subscriptionDescCreatedAt is the schema descriptor for created_at field.
	subscriptionDescCreatedAt := subscriptionFields[6].Descriptor()
	// subscription.DefaultCreatedAt holds the default value on creation for the created_at field.
	subscription.DefaultCreatedAt = subscriptionDescCreatedAt.Default.(func() time.Time)
	// subscriptionDescID is the schema descriptor for id field.
	subscriptionDescID := subscriptionFields[0].Descriptor()
	// subscription.DefaultID holds the default value on creation for the id field.
	subscription.DefaultID = subscriptionDescID.Default.(func() uuid.UUID)
	tokenFields := schema.Token{}.Fields()
	_ = tokenFields
	// tokenDescIsActive is the schema descriptor for is_active field.
	tokenDescIsActive := tokenFields[1].Descriptor()
	// token.DefaultIsActive holds the default value on creation for the is_active field.
	token.DefaultIsActive = tokenDescIsActive.Default.(bool)
	// tokenDescCreatedAt is the schema descriptor for created_at field.
	tokenDescCreatedAt := tokenFields[2].Descriptor()
	// token.DefaultCreatedAt holds the default value on creation for the created_at field.
	token.DefaultCreatedAt = tokenDescCreatedAt.Default.(func() time.Time)
	// tokenDescID is the schema descriptor for id field.
	tokenDescID := tokenFields[0].Descriptor()
	// token.DefaultID holds the default value on creation for the id field.
	token.DefaultID = tokenDescID.Default.(func() uuid.UUID)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescCreatedAt is the schema descriptor for created_at field.
	userDescCreatedAt := userFields[4].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the created_at field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(func() time.Time)
	// userDescID is the schema descriptor for id field.
	userDescID := userFields[0].Descriptor()
	// user.DefaultID holds the default value on creation for the id field.
	user.DefaultID = userDescID.Default.(func() uuid.UUID)
}
